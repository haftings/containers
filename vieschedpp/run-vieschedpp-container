#! /usr/bin/env python3

'''Run the VieSched++ container with X11 support

Typical usage: %(prog)s --host somehost

Usage Notes:
  - Any additional arguments will be sent to the container engine
  - SSH is always used in order to tunnel X11
  - Outer SSH connection authenticates user and host(s)
  - Inner SSH connection is unauthenticated and does not use networking

Requirements:
  - This host must have Python 3.8+
  - Remote host must have docker or podman installed
  - Remote host must have a VieSched++ container loaded
'''

import argparse
import os
import subprocess
import sys

try:
    from shlex import quote
except ImportError:
    from pipes import quote

p = argparse.ArgumentParser(
    description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
)
p.add_argument(
    '--image', '-i', default='vieschedpp',
    help='run this container name (default %(default)s)'
)
p.add_argument(
    '--host', '-n', default='',
    help='SSH to this host and run container on it (default \'\' for n/a)'
)
p.add_argument(
    '--engine', '-e', default='docker,podman',
    help='list of container engine(s) to try to use (default %(default)s)'
)
p.add_argument(
    '--root', '-r', default='', help=(
        'root directory for --master, --catalogs, and --finals '
        'which is used if they don\'t start with ., .., or / (default \'\')'
    )
)
p.add_argument(
    '--master', '-m', default='master/',
    help='path to master files dir on container host (default %(default)s)'
)
p.add_argument(
    '--catalogs', '-c', default='catalogs/',
    help='path to catalog files dir on container host (default %(default)s)'
)
p.add_argument(
    '--finals', '-f', default='',
    help='path to finals file, e.g. if not in catalogs (default \'\' for n/a)'
)
p.add_argument(
    '--out', '-o', default='./out',
    help='path to output directory on container host (default %(default)s)'
)
p.add_argument(
    '--mode', '-p', default='Z,ro', help=(
        'mount mode for --master, --catalogs, and --finals; options are '
        'ro (read only), rw (read and write), z (naive SELinux permissions), '
        'and Z (container-aware SELinux permissions); z or Z can be combined '
        'with ro or rw with a comma; (default is Z,ro)'
    )
)
a, extra_args = p.parse_known_args()

# set up proxy command
engine = a.engine.replace(',', ' ').split() or ['docker', 'podman']
if len(engine) == 1:
    engine = quote(engine[0])
else:
    engine = ('$(' + ''.join(
        f'(type {quote(app)}>/dev/null 2>&1&&echo {quote(app)})||'
        for app in engine[:-1]
    ) + f'echo {quote(engine[-1])})')
extra_args = ''.join(' ' + quote(arg) for arg in extra_args)
for arg_name, default_path in [
    ('master', 'AUTO_DOWNLOAD_MASTER'),
    ('catalogs', 'AUTO_DOWNLOAD_CATALOGS'),
    ('finals', 'AUTO_DOWNLOAD_CATALOGS/9_FINALS.ALL_IAU2000_V2013_019.txt'),
    ('out', 'out')
]:
    if arg_value := getattr(a, arg_name):
        x, _, m = arg_value.partition(':')
        if a.root and not f'{x}/'.startswith(('./', '../', '/')):
            x = os.path.join(a.root, x)
        x, m = quote(x or '.'), quote(m or a.mode)
        extra_args += f' $([ -e {x} ] && echo -v {x}:/root/{default_path}:{m}'
        extra_args += f' || echo warning: not found: {x}>&2)'
cmd = f'{engine} run --cap-add AUDIT_WRITE --rm -i{extra_args} {quote(a.image)}'
cmd = cmd + ' /usr/sbin/sshd -i'
if a.host not in '-':
    cmd = f'ssh {quote(a.host)} {quote(cmd)}'
cmd = [
    'ssh', '-Fnone', '-oUser root', f'-oProxyCommand {cmd}',
    '-oStrictHostKeyChecking no', '-oUserKnownHostsFile /dev/null',
    '-oForwardX11 yes', '-oForwardX11Trusted yes', '-oLogLevel error', '_'
]
sys.stdout.write(' '.join(map(quote, cmd)) + '\n')
exit(subprocess.Popen(cmd).wait())

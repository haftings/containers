#! /usr/bin/env python

'''Merge `Dockerfile` and `customizations/` into `custom.dockerfile`'''

import argparse
import os
import re
import sys

if sys.version_info < (2, 7):
    sys.exit('python 3.X or 2.7 required')

# parse args
p = argparse.ArgumentParser(description=__doc__)
p.add_argument(
    '-i', '--input', default='Dockerfile',
    help='input dockerfile path, - for stdin (default %(default)s)'
)
p.add_argument(
    '-o', '--output', default='custom.dockerfile',
    help='output dockerfile path, - for stdout (default %(default)s)'
)
p.add_argument(
    '-d', '--directory', default='customizations',
    help='customizations directory path (default %(default)s)'
)
a = p.parse_args()

# calculate paths
script_dir = os.path.dirname(__file__)
for att in ('input', 'output', 'directory'):
    if not getattr(a, att).startswith(('/', './', '../')):
        if getattr(a, att) not in '-':
            setattr(a, att, os.path.join(script_dir, getattr(a, att)))

# read original Dockerfile
if a.input in '-':
    full_text = sys.stdin.read()
else:
    with open(a.input) as f:
        full_text = f.read()
re_tag = re.compile(r'^#[ \t]*\{(.*)\}[ \t]*$', re.M)
tags = {r.strip().lower() for r in re_tag.findall(full_text)}
# find custom dockerfile(s)
if os.path.isdir(a.directory):
    for file in os.listdir(a.directory):
        if not file.lower().endswith('.dockerfile'):
            continue
        tag = file[:-11].lower()
        path = os.path.join(a.directory, file)
        if tag in tags and os.path.isfile(path):
            # read custom dockerfile
            with open(path) as f:
                text = f.read()
            # insert into main Dockerfile
            re_tag = re.compile(
                r'^#[ \t]*\{[ \t]*' + re.escape(tag) + r'[ \t]*\}[ \t]*$',
                re.I | re.M
            )
            text += '\n# {' + tag + '}' # add end tag to allow ordered recursion
            full_text = re_tag.sub(text, full_text)
# write results
if a.output in '-':
    sys.stdout.write(full_text)
else:
    with open(a.output, 'w') as f:
        f.write(full_text)
    sys.stdout.write('wrote ' + a.output + '\n')
